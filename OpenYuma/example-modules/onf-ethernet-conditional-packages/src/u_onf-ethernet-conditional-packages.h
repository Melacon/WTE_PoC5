
#ifndef _H_u_onf_ethernet_conditional_packages
#define _H_u_onf_ethernet_conditional_packages
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.5-5

    User SIL header
    module onf-ethernet-conditional-packages
    revision 2017-04-02
    namespace urn:onf:params:xml:ns:yang:onf-ethernet-conditional-packages
    organization ONF (Open Networking Foundation) Open Transport Working Group - Wireless Transport Project

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_onf-ethernet-conditional-packages.h"

#ifdef __cplusplus
extern "C" {
#endif

/* container /ethernet-pac/ethernet-capability */
typedef struct y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_capability_ {
} y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_capability;

/* container /ethernet-pac/ethernet-configuration */
typedef struct y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_configuration_ {
    int16 vlan_id;
} y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_configuration;

/* container /ethernet-pac/ethernet-status */
typedef struct y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_status_ {
} y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_status;

/* container /ethernet-pac/ethernet-current-problems */
typedef struct y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_current_problems_ {
} y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_current_problems;

/* container /ethernet-pac/ethernet-current-performance */
typedef struct y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_current_performance_ {
} y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_current_performance;

/* container /ethernet-pac/ethernet-historical-performances */
typedef struct y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_historical_performances_ {
} y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_historical_performances;

/* list /ethernet-pac */
typedef struct y_onf_ethernet_conditional_packages_T_ethernet_pac_ {
    dlq_hdr_t qhdr;
    xmlChar *layer_protocol;
    y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_capability ethernet_capability;
    y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_configuration ethernet_configuration;
    y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_status ethernet_status;
    y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_current_problems ethernet_current_problems;
    y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_current_performance ethernet_current_performance;
    y_onf_ethernet_conditional_packages_T_ethernet_pac_ethernet_historical_performances ethernet_historical_performances;
} y_onf_ethernet_conditional_packages_T_ethernet_pac;

/********************************************************************
* FUNCTION u_onf_ethernet_conditional_packages_ethernet_pac_layer_protocol_edit
* 
* Edit database object callback
* Path: /ethernet-pac/layer-protocol
* Add object instrumentation in COMMIT phase.
* 
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_onf_ethernet_conditional_packages_ethernet_pac_layer_protocol_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_ethernet_pac_layer_protocol);


/********************************************************************
* FUNCTION u_onf_ethernet_conditional_packages_ethernet_pac_ethernet_configuration_vlan_id_edit
* 
* Edit database object callback
* Path: /ethernet-pac/ethernet-configuration/vlan-id
* Add object instrumentation in COMMIT phase.
* 
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_onf_ethernet_conditional_packages_ethernet_pac_ethernet_configuration_vlan_id_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_ethernet_pac_layer_protocol);


/********************************************************************
* FUNCTION u_onf_ethernet_conditional_packages_ethernet_pac_ethernet_configuration_edit
* 
* Edit database object callback
* Path: /ethernet-pac/ethernet-configuration
* Add object instrumentation in COMMIT phase.
* 
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_onf_ethernet_conditional_packages_ethernet_pac_ethernet_configuration_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_ethernet_pac_layer_protocol);


/********************************************************************
* FUNCTION u_onf_ethernet_conditional_packages_ethernet_pac_edit
* 
* Edit database object callback
* Path: /ethernet-pac
* Add object instrumentation in COMMIT phase.
* 
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_onf_ethernet_conditional_packages_ethernet_pac_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_ethernet_pac_layer_protocol);

/********************************************************************
* FUNCTION u_onf_ethernet_conditional_packages_init
* 
* initialize the onf-ethernet-conditional-packages server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_onf_ethernet_conditional_packages_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_onf_ethernet_conditional_packages_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_onf_ethernet_conditional_packages_init2 (void);

/********************************************************************
* FUNCTION u_onf_ethernet_conditional_packages_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void u_onf_ethernet_conditional_packages_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif